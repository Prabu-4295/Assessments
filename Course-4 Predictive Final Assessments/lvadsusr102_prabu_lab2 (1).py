# -*- coding: utf-8 -*-
"""LVADSUSR102_prabu_lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hcXCE-PmpecPfy_AXp4QAbBqSSwMzaav
"""

# 2. linear Regression
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

data = pd.read_csv('/content/drive/MyDrive/auto-mpg.csv')
print(data.head())

# Handling missing values with mean
data.fillna(data.mean(), inplace=True)


# Handling duplicates
data = data.drop_duplicates()

# Convert horsepower to numeric
data['horsepower'] = data['horsepower'].replace('?', pd.NA)
data = data.dropna(subset=['horsepower'])
data['horsepower'] = pd.to_numeric(data['horsepower']).astype(int)

# EDA
print(data.describe())
print(data.info())  # No need for encoding since there are no categorical variables
print(data.head())

# Assigning X and y
X = data.drop(['car name', 'origin', 'model year', 'mpg'], axis=1)
y = data['mpg']

# Plotting with outliers
plt.figure(figsize=(9, 5))
sns.boxplot(data=X)
plt.title("Before managing Outliers")
plt.ylabel('Values')
plt.xticks(rotation=45)
plt.show()

# Function to manage outliers
def manage_outliers(data, columns):
    for col in columns:
        Q1 = data[col].quantile(0.25)
        Q3 = data[col].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        median = data[col].median()
        data[col] = np.where((data[col] < lower_bound) | (data[col] > upper_bound), median, data[col])
    return data

X = manage_outliers(X, X.columns)

# Plotting after managing the outliers
plt.figure(figsize=(9, 5))
sns.boxplot(data=X)
plt.title("After managing Outliers")
plt.ylabel('Values')
plt.xticks(rotation=45)
plt.show()

# Assigning Test and Training variables
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Executing Linear Regression
regression_model = LinearRegression()
regression_model.fit(X_train, y_train)
predictions = regression_model.predict(X_test)

# Print predicted values
print("-----Predictions-------")
print(predictions)

# Calculate performance metrics
print("----------Performance Metrics------------")
mse = mean_squared_error(y_test, predictions)
r2 = r2_score(y_test, predictions)


# Print the Evaluation metrics
print('Mean Squared Error:', mse)
print('R-squared:', r2)