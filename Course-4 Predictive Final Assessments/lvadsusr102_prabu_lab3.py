# -*- coding: utf-8 -*-
"""LVADSUSR102_prabu_lab3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13oVX0aIknNHu6vrN8eeZi4VYS0g0phUL
"""

# 3. K means Clustering
import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

# Load the seeds dataset
data = pd.read_csv('/content/drive/MyDrive/seeds.csv')

# Handling missing values with mean
data.fillna(data.mean(), inplace=True)


# Handling duplicates
data = data.drop_duplicates()

# EDA
print(data.describe())
print(data.info())  # No need for encoding since there are no categorical variables
print(data.head())

# Extracting features for clustering
X = data[['Area', 'Perimeter', 'Compactness', 'Length of kernel', 'Width of kernel', 'Asymmetry coefficient', 'Length of kernel groove']]

# Plotting with outliers
plt.figure(figsize=(9, 5))
sns.boxplot(data=X)
plt.title("Before managing Outliers")
plt.ylabel('Values')
plt.xticks(rotation=45)
plt.show()

# Function to manage outliers
def manage_outliers(data, columns):
    for col in columns:
        Q1 = data[col].quantile(0.25)
        Q3 = data[col].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        median = data[col].median()
        data[col] = np.where((data[col] < lower_bound) | (data[col] > upper_bound), median, data[col])
    return data

X = manage_outliers(X, X.columns)

# Plotting after managing the outliers
plt.figure(figsize=(9, 5))
sns.boxplot(data=X)
plt.title("After managing Outliers")
plt.ylabel('Values')
plt.xticks(rotation=45)
plt.show()


# Standardizing the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# K-means clustering
kmeans = KMeans(n_clusters=3, random_state=42)
kmeans.fit(X_scaled)
labels = kmeans.labels_


data['cluster'] = labels

# PCA
pca = PCA(n_components=2)
principal_components = pca.fit_transform(X_scaled)
principal_df = pd.DataFrame(data=principal_components, columns=['PC1', 'PC2'])
final_df = pd.concat([principal_df, data[['cluster']]], axis=1)

# Plotting
plt.figure(figsize=(10, 6))
plt.scatter(final_df['PC1'], final_df['PC2'], c=final_df['cluster'], cmap='inferno', alpha=0.5)
plt.xlabel('X axis')
plt.ylabel('Y axis')
plt.title('K-means Clustering of Seeds Dataset')
plt.colorbar(label='Cluster')
plt.show()